{% extends 'base.html.twig' %}

{% block title %}Wordle{% endblock %}
{% block headline %}{% endblock %}

{% block body %}
    <div class="d-flex justify-content-center mb-3">
        {% for day,dayUnix in days %}
            {% set classes = '' %}
            {% if dayUnix|date('d.m.Y') == unix|date('d.m.Y') %}
                {% set classes = classes ~ ' currentlyPlaying' %}
            {% endif %}
            <a href="{{ path('app_wordle_index', {"unix": dayUnix}) }}" class="mx-2 wordle-date {{ classes }}">
                {{ dayUnix|date('d.') }}<span class="d-none d-sm-inline">{{ dayUnix|date('m.') }}</span>
            </a>
        {% endfor %}
    </div>
{% if currentGame.isFinished and randomUnix %}
    <div class="d-flex justify-content-center mb-3">
        <a href="{{ path('app_wordle_index', {'unix': randomUnix, 'isRandom': true}) }}" class="mx-2 wordle-date">
            Random
        </a>
    </div>
{% endif %}

    <div class="row text-center">
        <div class="col-12 h1">
            {% if currentGame.isSolved %}
                <div>GlÃ¼ckwunsch! ðŸŽ‰</div>
            {% elseif currentGame.isFinished %}
                <div>Sorryyyy ðŸ˜”</div>
            {% else %}
                <div>viel Erfolg!</div>
                {% if random %}<div class="h4">Du Spielst das Wordle vom {{ random|date('d.m.Y') }}</div>{% endif %}
            {% endif %}
        </div>
        <div class="col-12 col-lg-6">
            {% if currentGame.isFinished %}
                <div class="my-2">
                    <button id="toggle-stats" class="btn btn-small btn-plain">Statistik anzeigen</button>
                </div>
                <canvas id="guesses-chart" class="d-none"></canvas>
            {% endif %}
            <div id="wordle-game" class="wordle-game disable-double-tap-zoom" data-unix="{{ unix }}"
                 data-url="{{ path('app_wordle_guess') }}" data-finished="{{ currentGame.isFinished|raw }}">
                {% for try in [0, 1, 2, 3, 4, 5] %}
                    <div class="wordle-try d-flex justify-content-center {% if try >= currentGame.guesses|length %}unfinished{% endif %}">
                        {% for letter in [0, 1, 2, 3, 4] %}
                            {% set statusInfo = '' %}
                            {% if try < currentGame.guesses|length %}
                                {% set statusInfo = currentGame.guesses[try].info[letter] %}
                            {% endif %}
                            <div class="wordle-cell d-flex justify-content-center align-items-center {{ statusInfo }}">
                                <div class="wordle-letter">
                                    {% if try < currentGame.guesses|length %}
                                        {{ currentGame.guesses[try].guessedWord[letter:1]|upper }}
                                    {% endif %}
                                </div>
                            </div>
                        {% endfor %}
                    </div>
                {% endfor %}
                <div class="wordle-try d-flex justify-content-center">
                    {% if not currentGame.isSolved and currentGame.isFinished %}
                        {% for letter in [0, 1, 2, 3, 4] %}
                            <div class="wordle-cell d-flex justify-content-center align-items-center bg-amro-red">
                                <div class="wordle-letter">
                                    {{ currentGame.solution.correctWord[letter:1]|upper }}
                                </div>
                            </div>
                        {% endfor %}
                    {% endif %}
                </div>

                <div class="d-flex justify-content-center {% if currentGame.isFinished %}d-none{% endif %}">
                    <div id="keyboard" class="mt-3">
                        <div class="d-flex justify-content-center">
                            {% for char in ['q', 'w', 'e', 'r', 't', 'z', 'u', 'i', 'o', 'p'] %}
                                <div class="key {{ currentGame.getLetterStatus(char) }} align-content-center">{{ char|upper }}</div>
                            {% endfor %}
                        </div>
                        <div class="d-flex justify-content-center">
                            {% for char in ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l'] %}
                                <div class="key {{ currentGame.getLetterStatus(char) }} align-content-center">{{ char|upper }}</div>
                            {% endfor %}
                        </div>
                        <div class="d-flex justify-content-center">
                            <div class="key align-content-center" id="enter-key">âœ“</div>
                            {% for char in ['y', 'x', 'c', 'v', 'b', 'n', 'm'] %}
                                <div class="key {{ currentGame.getLetterStatus(char) }} align-content-center">{{ char|upper }}</div>
                            {% endfor %}
                            <div class="key align-content-center" id="backspace-key">âŒ«</div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-12 col-lg-6 my-3">
            <div id="wordle-info" class="row">
                {% for game in solution.games %}
                    {% if game.guesses|length > 0 %}
                        <div class="col-6 mb-3">
                            <div class="fw-bold">
                                <a href="{{ path('app_wordle_user', {'userId': game.player.id}) }}">
                                    {{ game.player.getUserIdentifier|capitalize }}
                                </a>
                            </div>
                            <div class="py-2">
                                {% for guess in game.guesses %}
                                    <div class="d-flex justify-content-center">
                                        {% for letter in [0, 1, 2, 3, 4] %}
                                            <div class="wordle-cell-sm d-flex justify-content-center align-items-center {{ guess.info[letter] }}">
                                                {% if currentGame.isFinished %}{{ guess.guessedWord[letter:1]|upper }}{% endif %}
                                            </div>
                                        {% endfor %}
                                    </div>
                                {% endfor %}

                                <div class="d-flex justify-content-center">
                                    {% if game.isFinished and not game.isSolved %}
                                        {% for letter in [0, 1, 2, 3, 4] %}
                                            <div class="wordle-cell-sm d-flex justify-content-center align-items-center bg-amro-red">
                                                {% if currentGame.isFinished %}{{ solution.correctWord[letter:1]|upper }}{% endif %}

                                            </div>
                                        {% endfor %}
                                    {% endif %}
                                </div>
                            </div>
                            {% if not game.isFinished %}
                                <div class="d-flex justify-content-center align-items-center pt-1">spielt noch...</div>
                            {% endif %}
                        </div>
                    {% endif %}
                {% endfor %}
            </div>
        </div>
    </div>

    {% if guessesNeeded is defined %}
        <canvas id="guesses-chart" class="my-3"></canvas>
        <script>
            chart = null;
            document.getElementById('toggle-stats').addEventListener('click', () => {
                document.getElementById('guesses-chart').classList.toggle('d-none');
                document.getElementById('wordle-game').classList.toggle('d-none');
                if (!chart) {
                    createChart();
                }
            });

            const colors = ["#67a760", '#98ad5c', "#c8b359", "#b67a4a", "#a4413a"];

            let ctx = document.getElementById('guesses-chart').getContext('2d');

            const gradient = ctx.createLinearGradient(0, 0, ctx.canvas.width, 0);
            gradient.addColorStop(0, colors[0]);

            const greenYellowGradient = ctx.createLinearGradient(0, 0, ctx.canvas.width, 0);
            greenYellowGradient.addColorStop(0, colors[0]);
            greenYellowGradient.addColorStop(0.4, colors[0]);
            greenYellowGradient.addColorStop(0.8, colors[1]);
            greenYellowGradient.addColorStop(1, colors[1]);

            const yellowRedGradient = ctx.createLinearGradient(0, 0, ctx.canvas.width, 0);
            yellowRedGradient.addColorStop(0, colors[1]);
            yellowRedGradient.addColorStop(0.4, colors[1]);
            yellowRedGradient.addColorStop(0.8, colors[2]);
            yellowRedGradient.addColorStop(1, colors[2]);

            let chartData = {
                labels: ["1", "2", "3", "4", "5", "6", "nope"],
                datasets: [{
                    data: [
                        {% for i in 1..6 %}
                        {{ guessesNeeded|filter(x => x == i)|length }},
                        {% endfor %}
                        {{ guessesNeeded|filter(x => x > 6)|length }}
                    ],
                    backgroundColor: [colors[0], colors[0], colors[0], colors[1], colors[2], colors[3], colors[4]],
                    borderColor: 'rgba(164, 65, 58, 1)',
                }]
            }

            function createChart() {
                const totalGuesses = chartData.datasets[0].data.reduce((a, b) => a + b, 0);

                const chart = new Chart(ctx, {
                    type: 'bar',
                    data: chartData,
                    options: {
                        scales: {
                            y: {
                                title: {display: true, text: 'Spiele', font: {size: 20}},
                            },
                            x: {
                                title: {display: true, text: 'Versuche', font: {size: 20}},
                            }
                        },
                        plugins: {
                            legend: {
                                display: false,
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(tooltipItem) {
                                        let value = chartData.datasets[0].data[tooltipItem.dataIndex];
                                        let percentage = ((value / totalGuesses) * 100).toFixed(2);
                                        return ` ${value} (${percentage}%)`;
                                    }
                                }
                            }
                        },
                    }
                });

                return;
                chart.data.datasets[0].backgroundColor = updateGradient();
                chart.update();
                window.addEventListener('resize', () => {
                    chart.data.datasets[0].backgroundColor = updateGradient();
                    chart.update();
                });
            }
        </script>
    {% endif %}

{% endblock %}
